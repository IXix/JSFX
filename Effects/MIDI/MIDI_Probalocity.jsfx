/*******************************************************************************
version: 1.0
desc: MIDI_Probalocity (pattern variation generator)
author: IX
provides: . > ../../MIDI_Probalocity
about:
  # MIDI Probalocity
  Input velocity determines chance of whether note will be passed or blocked.
  
  Full (127) velocity notes will always be passed.
  
  Use Scale and Offset to bring output velocities to the required level.
  
  Scale lowers high velocities. Offset sets the base velocity level.
  
  http://wiki.cockos.com/wiki/index.php/Jesusonic_Effects_Documentation#Probalocity
********************************************************************************
* Copyright 2008 Philip S. Considine
* License: GPL - http://www.gnu.org/licenses/gpl.html
*******************************************************************************/

////////////////////////////////////////////////////////////////////////////////////////////
desc: Velocity == Probability

////////////////////////////////////////////////////////////////////////////////////////////

//Input Channel
slider1:0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Input Channel

/*----------- NOTE MIN/MAX You can change these if you want! --------------*/
//Sliders
slider2:0<0,127,1>Note Min
slider3:127<0,127,1>Note Max

//Drop-downs with note names (disabled)
//slider2:0<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Note Min
//slider3:127<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Note Max
/*-------------------------------------------------------------------------*/

slider4:150<0,500,1>Scale
slider5:-64<-127,127,1>Offset

////////////////////////////////////////////////////////////////////////////////////////////
@init

statNoteOff = 8 * 16;
statNoteOn = 9 * 16;

////////////////////////////////////////////////////////////////////////////////////////////
@slider

inChannel = slider1;
noteMin = slider2;
noteMax = slider3;
scale = slider4 * .01;
offset = slider5 = floor(slider5);

////////////////////////////////////////////////////////////////////////////////////////////
@block
while
(
	midirecv(0,msg1,msg23) ?
	(
		pass = 1; //Pass by default

		status = msg1 & 240;
		channel = msg1 & 15;
		
		//Is it on our channel?
		channel == inChannel ?
		(
			//Is it a note?
			status == statNoteOn || status == statNoteOff?
			(
				note = msg23 & 127;
				velocity = (msg23/256) & 127;

				!(note < noteMin || note > noteMax) ?
				(
					status == statNoteOn && velocity > 0 ?
					(
						prob = velocity / 127;
						trig = rand(1);

						prob >= trig ?
						(
							velocity = floor(velocity * scale);
							velocity += offset;

							velocity > 127 ?
								velocity = 127 :
									velocity < 0 ?
										velocity = pass = 0;

							tracker[note] = velocity;

							msg23 = note | (velocity * 256);
						)
						:
						pass = 0;
					)
					:
					tracker[note] > 0 ?
						tracker[note] = 0 : pass = 0;
				);
			);
		);

		pass == 1 ?
			midisend(0,msg1,msg23);
			
		1;
	);
);