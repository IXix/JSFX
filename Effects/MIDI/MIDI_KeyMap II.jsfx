/*******************************************************************************
version: 1.1
desc: MIDI_KeyMap II (note mapping tool)
author: IX
provides: . > ../../MIDI_KeyMap II
about:
  # MIDI KeyMap II
  Incoming notes are transformed according to internal mapping.
  
  Slider 3 refers to input notes and will respond to incoming MIDI.
  
  Slider 4 sets/displays the output note mapped to the input shown by slider 3.
  
  http://wiki.cockos.com/wiki/index.php/Jesusonic_Effects_Documentation#KeyMap_II
changelog:
  +Added graphical mapping display
********************************************************************************
* Copyright 2014-2018 Philip S. Considine
* License: GPL - http://www.gnu.org/licenses/gpl.html
*******************************************************************************/

desc: MIDI Key re-mapping utility
//tags: MIDI processing mapping
//author: IXix

slider1:1<0,1,1{Off,On}>On/Off
slider2:0<0,16,1{Any,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Channel

// Note Sliders
slider3:0<0,127,1>Source Key
slider4:0<0,127,1>Destination Key

// Note drop-downs (disabled)
//slider3:0<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Source Key
//slider4:0<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Desination Key

/////////////////////////////////////////////////////////////////////////////////////////////////
@init
ext_noinit = 1;

statNoteOff = $x80;
statNoteOn = $x90;

loop
(
	128,
	map[i] = i;
	i += 1;
);

/////////////////////////////////////////////////////////////////////////////////////////////////
@serialize
file_mem(0, 0, 128);

/////////////////////////////////////////////////////////////////////////////////////////////////
@slider
switch = slider1;

inChannel = slider2 - 1;

slider3 != inputNote ?
(
	inputNote = slider3 = floor(slider3);
	slider4 = map[inputNote];
);

slider4 != outputNote ?
(
	outputNote = slider4 = floor(slider4);
	map[inputNote] = outputNote;
);

/////////////////////////////////////////////////////////////////////////////////////////////////
@block
while
(
	midirecv(offset, msg1, msg23) ?
	(
		status = msg1 & 240;
		channel = msg1 & 15;

		channel == inChannel || inChannel == -1 ? 
		(
			status == statNoteOn || status == statNoteOff ?
			(
				note = msg23 & 127;
				velocity = ((msg23 / 256) & 127);

				switch == 1 ?
				(
					// Send mapped note and update controls
					midisend(offset, msg1, map[note] | (velocity * 256));
					slider3 = note; sliderchange(slider3);
					slider4 = map[note]; sliderchange(slider4);
				)
				:
				midisend(offset, msg1, msg23); //Switched off, pass thru
			)
			:
			midisend(offset, msg1, msg23); //Not a note, pass thru     
		)
		:
		midisend(offset, msg1, msg23); //Not on our channel, pass thru
	);
);

/////////////////////////////////////////////////////////////////////////////////////////////////
@gfx 360 360

// Set up note name table
function InitNoteNames()
  local(s, n, o)
(
  // Set these up so we can get the note string by (note % 12) + 128
  strcpy(128, "C");
  strcpy(129, "C#");
  strcpy(130, "D");
  strcpy(131, "D#");
  strcpy(132, "E");
  strcpy(133, "F");
  strcpy(134, "F#");
  strcpy(135, "G");
  strcpy(136, "G#");
  strcpy(137, "A");
  strcpy(138, "A#");
  strcpy(139, "B");
  
  s = 0;
  loop
  (
    128,
    n = s % 12;
    o = (s / 12) | 0;
    sprintf(s, "%s%d", n + 128, o); // n + 128 is the base string "C", "C#" etc. defined above
    s += 1;
  );
);

!gfxInitDone ?
(
  InitNoteNames();
  gfx_a = 1;
  gfx_r = gfx_g = gfx_b = 1;
  rowHeight = gfx_texth * 1.5;
  colWidth = 100;
  
  gfxInitDone = 1;
);

count = 0;
marginL = 5;
marginT = 15;

gfx_x = marginL;
gfx_y = 5;

gfx_drawstr("Mapping");

marginT = 20;
gfx_line(marginL, marginT, gfx_w - 2 * marginL, marginT);

marginT = 30;

i = 0;
loop
(
  128,
  
  noteRow = count % 12;
  oct = (count / 12) | 0;

  octRow = ((oct / 5) | 0) * (rowHeight * 13) |  0; // 13 for spacing
  octCol = oct % 5;

  gfx_x = octCol * colWidth + marginL;
  gfx_y = octRow + noteRow * rowHeight + marginT;
  
  map[i] != i ?
  (
    count += 1;
    gfx_printf("%s -> %s\n", i, map[i]); // This pulls the note names from numbered strings 0-127
  );
  
  i += 1;
);

