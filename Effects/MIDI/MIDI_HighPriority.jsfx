/*******************************************************************************
version: 1.0
desc: MIDI_HighPriority (monosynth behaviour for polysynth)
author: IX
provides: . > ../../MIDI_HighPriority.jsfx
about:
  # MIDI High Priority
  Simulates monophonic synth behaviour for polyphonic synths.
  
  Higher notes cause lower notes to stop but releasing the high note will reactivate the lower note.
  
********************************************************************************
* Copyright 2012 Philip S. Considine
* License: GPL - http://www.gnu.org/licenses/gpl.html
*******************************************************************************/

desc: High key priority

in_pin:none
out_pin:none

slider1:0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Channel

//slider2:0<0,127,1>Note Min
slider2:0<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Note Min

//slider3:127<0,127,1>Note Max
slider3:127<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Note Max

slider4:1<0,1,1{No,Yes}>Force prev note-on?
slider5:1<0,1,1{No,Yes}>Force prev note-off?

@slider
inChannel = slider1;
slider2 = noteMin = min(max(slider2 | 0, 0), 127);
slider3 = noteMax = min(max(slider3 | 0, 0), 127);
forceOn = slider4;
forceOff = slider5;

@init
statNoteOff = $x80;
statNoteOn = $x90;
current = -1;

@block

while
(
	midirecv(offset, msg1, msg23) ?
	(
		status = msg1 & $xF0;
		channel = msg1 & $x0F;

		channel == inChannel ?
		(
			mode = -1;			
			
			status == statNoteOn ?
			(
				mode = (msg23 >> 8) > 0 ? 1 : 0;
			)
			: status == statNoteOff ?
			(
				mode = 0;
			)
			:
			(
				midisend(offset, msg1, msg23); // Not a note event
			);
		
			// Ignore notes outside range
			note = msg23 & $x7F;
			mode > -1 && (note < noteMin || note > noteMax) ?
			(
				midisend(offset, msg1, msg23); // Pass note event
				mode = -1;
			);
			
			mode == 1 ? // Note-on
			(
				activeNotes[note] = 1; // active
				
				note > current ?
				(					
					midisend(offset, msg1, msg23); // Pass note-on
					
					// If a note is already playing, generate note-off for current note if necessary.
					forceOff && current > -1 ?
					(
						midisend(offset, statNoteOff | channel, current | (velocity << 8));
					);
					
					current = note;
					velocity = msg23 >> 8;
				);			
			)
			: mode == 0 ? // Note-off
			(			
				activeNotes[note] = 0; // inactive
							
				note == current ?
				(
					// Set current to next lowest active note.
					current -= 1;
					done = 0;
					while
					(
						// If we find a held note, generate new note-on message.
						activeNotes[current] > 0 ?
						(
							forceOn ?
							(
								midisend(offset, statNoteOn | channel, current | (velocity << 8));
							);
							activeNotes[current] = 1;
							done = 1;
						);
						
						!done && (current -= 1) > -1; // loop condition
					);
				);
				
				midisend(offset, msg1, msg23); // Pass note-off
			);
		)
		:
		(
			midisend(offset, msg1, msg23); // Not on our channel
		);

		1; // Force processing of all events
	);
);

