/*******************************************************************************
version: 1.0
desc: MIDI_Antiflam (duplicate note blocker)
author: IX
provides: . > ../../MIDI_Antiflam.jsfx
about:
  # MIDI Antiflam
  Block duplicate note messages occurring within specified time within range of notes on specified channel.
  
********************************************************************************
* Copyright 2007-2011 Philip S. Considine
* License: GPL - http://www.gnu.org/licenses/gpl.html
*******************************************************************************/

desc: MIDI Anti-flam

in_pin:none
out_pin:none

slider1:0<0,15,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Input Channel
slider2:0<0,127,1>Note Min
slider3:127<0,127,1>Note Max

// Note min/max (names) (disabled)
//slider2:0<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Note Min
//slider3:127<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8,C9,C#9,D9,D#9,E9,F9,F#9,G9,G#9,A9,A#9,B9,C10,C#10,D10,D#10,E10,F10,F#10,G10}>Note Max

slider4:20<0,1000,1>Block time (ms)

////////////////////////////////////////////////////////////////////////////////
@init

statNoteOn = $x90;
statNoteOff = $x80;
active = 0;
timers = 128;

////////////////////////////////////////////////////////////////////////////////
@slider
inChannel = slider1;
noteMin = min(max(slider2 | 0, 0), 127);
noteMax = min(max(slider3 | 0, 0), 127);
blockTime = slider4 * srate * 0.001;

////////////////////////////////////////////////////////////////////////////////
@block

// Adjust or reset timers/activity flags
index = 0;
while
(
	!(index < noteMin || index > noteMax) ?
	(
		timers[index] > 0 ? timers[index] -= samplesblock;
	)
	:
	(
		active[index] = 0;
		timers[index] = 0;
	);
	(index += 1) < 128;
);

while
(
	midirecv(offset, msg1, msg23) ?
	(		
		// Extract message type and channel
		status = msg1 & $xF0;
		channel = msg1 & $x0F;
			
		// Is it on our channel?
		channel == inChannel ? 
		(
			// Is it a note event?
			status == statNoteOn || status == statNoteOff ?
			(
				note = msg23 & $x7F;
				velocity = msg23 >> 8;
				
				// Is it in our range?
				!(note < noteMin || note > noteMax) ?
				(
					status == statNoteOn && velocity > 0 ?
					(
						// Note on
						(active[note] == 0) && ((timers[note] - offset) < 1) ?
						(
							midisend(offset, msg1, msg23);
							active[note] = 1;
						);
					)
					:
					(
						// Note off
						active[note] == 1 ?
						(
							midisend(offset, msg1, msg23);
							active[note] = 0;
							timers[note] = blockTime - (samplesblock - offset);
						);
					);
				)
				:
				(
					midisend(offset, msg1, msg23); // Not in our range, pass thru
				);
			)
			:
			(
				midisend(offset, msg1, msg23); // Not a note, pass thru
			);
		)
		:
		(
			midisend(offset, msg1, msg23); // Not on our channel, pass thru
		);
		
		1; // Force loop to continue until all messages have been processed
	);
);

