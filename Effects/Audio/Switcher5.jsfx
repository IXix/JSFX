/*******************************************************************************
version: 1.1
desc: Switcher5 (channel input selector)
author: IX
provides: . > ../../Switcher5.jsfx
about:
  # Switcher 5
  Send from selectable stereo inputs A, B, C or D to outputs 1+2 with adjustable crossfade to avoid clicks. Optionally block audio from source channels.
changelog:
  + Fixed broken gain sliders
********************************************************************************
* Copyright 2020 Philip S. Considine
* License: GPL - http://www.gnu.org/licenses/gpl.html
*******************************************************************************/

desc:Input switcher

slider1:0<0,3,1{A,B,C,D}>Output source
slider2:0<-30,12,0.1>Output Level (dB)

slider3:0<0,63,1{1+2,3+4,5+6,7+8,9+10,11+12,13+14,15+16,17+18,19+20,21+22,23+24,25+26,27+28,29+30,31+32,33+34,35+36,37+38,39+40,41+42,43+44,45+46,47+48,49+50,51+52,53+54,55+56,57+58,59+60,61+62,63+64}>A Source
slider4:0<-60,30,0.1>A Level (dB)

slider5:1<0,63,1{1+2,3+4,5+6,7+8,9+10,11+12,13+14,15+16,17+18,19+20,21+22,23+24,25+26,27+28,29+30,31+32,33+34,35+36,37+38,39+40,41+42,43+44,45+46,47+48,49+50,51+52,53+54,55+56,57+58,59+60,61+62,63+64}>B Source
slider6:0<-60,30,0.1>B Level (dB)

slider7:2<0,63,1{1+2,3+4,5+6,7+8,9+10,11+12,13+14,15+16,17+18,19+20,21+22,23+24,25+26,27+28,29+30,31+32,33+34,35+36,37+38,39+40,41+42,43+44,45+46,47+48,49+50,51+52,53+54,55+56,57+58,59+60,61+62,63+64}>C Source
slider8:0<-60,30,0.1>C Level (dB)

slider9:3<0,63,1{1+2,3+4,5+6,7+8,9+10,11+12,13+14,15+16,17+18,19+20,21+22,23+24,25+26,27+28,29+30,31+32,33+34,35+36,37+38,39+40,41+42,43+44,45+46,47+48,49+50,51+52,53+54,55+56,57+58,59+60,61+62,63+64}>D Source
slider10:0<-60,30,0.1>D Level (dB)

slider11:muteChannels=0<0,1,1{Pass,Block}>Pass aux inputs

slider12:fadeTime=30<0,1000,10>Fade time (ms)

///////////////////////////////////////////////////////////////////////////////////////////////////
@init

ext_noinit = 1;

function Init()
  instance(src, l, r, lvl, gainCurrent, gainTarget, dirty)
(
  dirty = 0;
  l = r = -1;
  src = -1;
  lvl = 1;
  gainCurrent = gainTarget = 1;
);

function Copy(n*)
  instance(src, l, r, lvl, gainCurrent, gainTarget, dirty)
(
  src != n.src ? dirty = 1;
  l = n.l;
  r = n.r;
  src = n.src;
  lvl = n.lvl;
  gainTarget = 10 ^ (lvl / 20);
  gainCurrent = n.gainCurrent;
);

function Set(source, level)
  instance(src, l, r, lvl, gainTarget)
(
  src = source;
  l = src * 2;
  r = l + 1;
  lvl = level;
  gainTarget = 10 ^ (lvl / 20);
);

Master.gainCurrent = Master.gainTarget = 1;

smoothTime = 20; // Smoothing for gain sliders in ms

A.Init();
B.Init();
C.Init();
D.Init();
Current.Init();
Prev.Init();

///////////////////////////////////////////////////////////////////////////////////////////////////
@slider

Master.gainTarget = 10 ^ (slider2 / 20);

// Clamp gain values
slider2 = min(max(slider2, -60), 30);
slider4 = min(max(slider4, -60), 30);
slider6 = min(max(slider6, -60), 30);
slider8 = min(max(slider8, -60), 30);
slider10 = min(max(slider10, -60), 30);

// Update source settings
A.Set(slider3, slider4);
B.Set(slider5, slider6);
C.Set(slider7, slider8);
D.Set(slider9, slider10);

// Copy current source to avoid lots of conditionals later
slider1 == 0 ?
(
  Current.src != A.src ? Prev.Copy(Current);
  Current.Copy(A);
);
slider1 == 1 ?
(
  Current.src != B.src ? Prev.Copy(Current);
  Current.Copy(B)
);
slider1 == 2 ?
(
  Current.src != C.src ? Prev.Copy(Current);
  Current.Copy(C)
);
slider1 == 3 ?
(
  Current.src != D.src ? Prev.Copy(Current);
  Current.Copy(D)
);

// If Current source has changed, start a crossfade
Current.dirty ? ( fadeGain = 1; Current.dirty = 0; );

///////////////////////////////////////////////////////////////////////////////////////////////////
@block

function onepole(in, target, ms)
  instance(ms, coeff, ncoeff)
(
  ms != this.ms ? // Only calculate coeff if time constant has changed
  (
    coeff = exp(-1 / (ms * 0.001 * srate / samplesblock));
    ncoeff = 1 - coeff;
    this.ms = ms;
  );

  in * coeff + target * ncoeff;
);

function UpdateGain(n*, ms) ( n.gainCurrent = n.onepole(n.gainCurrent, n.gainTarget, ms); );

// UpdateGain gain changes
UpdateGain(A, smoothTime);
UpdateGain(B, smoothTime);
UpdateGain(C, smoothTime);
UpdateGain(D, smoothTime);
UpdateGain(Prev, smoothTime);
UpdateGain(Current, smoothTime);
UpdateGain(Master, smoothTime);
fadeGain = Fade.onepole(fadeGain, 0, fadeTime);

// Block output on channels other than 1+2
A.pass = B.pass = C.pass = D.pass = 1;
muteChannels ?
(
  A.l ? A.pass = 0;
  B.l ? B.pass = 0;
  C.l ? C.pass = 0;
  D.l ? D.pass = 0;
);

///////////////////////////////////////////////////////////////////////////////////////////////////
@sample

// Do output
oldGain = Prev.gainCurrent * fadeGain  * Master.gainCurrent;
newGain = Current.gainCurrent * (1 - fadeGain) * Master.gainCurrent;
spl0 = (spl(Prev.l) * oldGain) + (spl(Current.l) * newGain);
spl1 = (spl(Prev.r) * oldGain) + (spl(Current.r) * newGain);

// Do channel blocking
spl(A.l) *= A.pass;
spl(A.r) *= A.pass;
spl(B.l) *= B.pass;
spl(B.r) *= B.pass;
spl(C.l) *= C.pass;
spl(C.r) *= C.pass;
spl(D.l) *= D.pass;
spl(D.r) *= D.pass;
